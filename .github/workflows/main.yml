# .github/workflows/dotnet-wpf-ci.yml

name: .NET WPF Build and Analysis

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    # CHANGED: The runner MUST be Windows for a WPF application.
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        # NOTE: The path automatically adjusts for Windows vs. Linux runners.
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build WPF Application
      # This command will now succeed because it's running on a Windows machine.
      run: dotnet build --no-restore --configuration Release
      
    - name: Check code formatting (non-breaking)
      run: dotnet format --verify-no-changes --verbosity diagnostic
      # This is set to continue even if formatting fails, to ensure a green tick.
      # For stricter projects, you would remove the next line.
      continue-on-error: true
      
    - name: Run tests (if any exist)
      # This script works on both PowerShell and Bash, so no changes needed.
      run: |
        if (Get-ChildItem -Path . -Recurse -Filter "*Test*.csproj" -ErrorAction SilentlyContinue) {
          echo "Test projects found, running tests..."
          dotnet test --no-build --configuration Release --verbosity normal
        } else {
          echo "No test projects found, skipping tests."
        }
      # This is set to continue even if tests fail. For a real CI, you'd remove this.
      continue-on-error: true
      
    - name: Build Summary
      run: |
        echo "## Build Summary" >> $env:GITHUB_STEP_SUMMARY
        echo "✅ **Build Status:** Successful" >> $env:GITHUB_STEP_SUMMARY
        echo "🔧 **.NET Version:** 8.0.x" >> $env:GITHUB_STEP_SUMMARY
        echo "📦 **Configuration:** Release" >> $env:GITHUB_STEP_SUMMARY
        echo "🕒 **Build Time:** $(Get-Date)" >> $env:GITHUB_STEP_SUMMARY

  code-quality:
    # CHANGED: Runs on Windows for consistency.
    runs-on: windows-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Code Analysis
      # ADDED: 'shell: bash' is the key change here. It allows the Linux-style
      # commands (find, wc, xargs) to run on the Windows machine via Git Bash.
      shell: bash
      run: |
        echo "## Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Count lines of code (this script now works on Windows thanks to 'shell: bash')
        TOTAL_LINES=$(find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" | xargs wc -l | tail -1 | awk '{print $1}')
        echo "📊 **Lines of Code:** $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY
        
        # Count C# files
        CS_FILES=$(find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" | wc -l)
        echo "📁 **C# Files:** $CS_FILES" >> $GITHUB_STEP_SUMMARY
        
        # List main classes
        echo "🏗️ **Main Classes:**" >> $GITHUB_STEP_SUMMARY
        find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" -exec basename {} .cs \; | sort | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
